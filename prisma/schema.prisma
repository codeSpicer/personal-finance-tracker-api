
generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  USER
  ADMIN
}

enum UserAction {
  LOGIN
  SIGNUP
  LOGOUT
  PASSWORD_CHANGE
  LOGIN_FAILED 
}

enum TransactionType {
  CREATE
  UPDATE
  DELETE
}

model TransactionLedger {
  id            Int             @id @default(autoincrement())
  userId        Int
  expenseId     Int?
  transactionType TransactionType
  oldData       Json?           // Store previous state for reversals
  newData       Json?           // Store new state for reference
  createdAt     DateTime        @default(now())
  isReversed    Boolean         @default(false)
  reversedAt    DateTime?
  user          User            @relation(fields: [userId], references: [id])
}

model User {
  id        Int       @id @default(autoincrement())
  email     String    @unique
  password  String
  role      UserRole  @default(USER)
  otp       String?   
  otpExpiry DateTime? 
  isVerified Boolean  @default(false)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  expenses  Expense[]
  budgets   Budget[]
  auditLogs AuditLog[]
  transactions TransactionLedger[] 
}

model Expense {
  id          Int      @id @default(autoincrement())
  amount      Float
  date        DateTime
  category    String
  tags        String[]
  notes       String?
  userId      Int
  user        User     @relation(fields: [userId], references: [id])
  createdAt   DateTime @default(now())
}

model Budget {
  id        Int      @id @default(autoincrement())
  category  String
  limit     Float
  userId    Int
  user      User     @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())
}

model AuditLog {
  id        Int       @id @default(autoincrement())
  userId    Int
  action    UserAction    
  ipAddress String?
  userAgent String?
  timestamp DateTime  @default(now())
  user      User      @relation(fields: [userId], references: [id])
}
